# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.plugins import buildslave
# c['slaves'] = [buildslave.BuildSlave("raspi_bot", "so!nsecur3", properties={ 'os':'debian' }, keepalive_interval=3600, max_builds=1)]
c['slaves'] = [buildslave.LocalBuildSlave('raspi_bot')]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
# c['slavePortnum'] = 9989 # not recommended; see section 'PB Port' instead

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/buildbot/pyflakes.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git://github.com/buildbot/pyflakes.git', mode='copy'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(ShellCommand(command=["trial", "pyflakes"]))

from buildbot.plugins import util

c['builders'] = [
    util.BuilderConfig(name='quick', slavenames=['raspi_bot'], factory=f_quick, description='Quick standard tests'),
    util.BuilderConfig(name='thorough', slavename='raspi_bot', factory=f_thorough, description='Run all tests'),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Robot Learning Toolbox"
c['titleURL'] = "https://github.com/codedust/robot-learning-toolbox/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://faboschert.ddns.net/buildbot/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

####### MQ implementation
c['mq'] = {
    'type' : 'simple',
    'debug' : False,
}

####### Logging

c['logCompressionLimit'] = 4096
c['logCompressionMethod'] = 'gz'
# c['logMaxSize'] = 1024*1024 # 1M
# c['logMaxTailSize'] = 32768
c['logEncoding'] = 'utf-8'

####### Horizons

c['changeHorizon'] = 100
c['buildHorizon'] = 100
c['eventHorizon'] = 50
c['logHorizon'] = 20
c['buildCacheSize'] = 15

####### Caches

c['caches'] = {
    'Changes' : 20,     # formerly c['changeCacheSize']
    'Builds' : 10,      # formerly c['buildCacheSize']
    'chdicts' : 20,
    'BuildRequests' : 5,
    'SourceStamps' : 10,
    'ssdicts' : 10,
    'objectids' : 10,
    'usdicts' : 50,
}

####### Merging Build Requests

c['collapseRequests'] = True

####### Builder Priorities
# left default

####### PB Port
c['protocols'] = {"pb": {"port": "tcp:9989:interface=127.0.0.1"}} # Localhost only! (only slaves on the same machine can connect)

####### Global build properties
# c['properties'] = {'Everywhere' : 'every build can see me'}

####### Metrics
c['metrics'] = dict(log_interval=60, periodic_interval=30)

####### Statistics Service
# not activated

####### Users

# from buildbot.plugins import util
# c['user_managers'] = []
# c['user_managers'].append(util.CommandlineUserManager(username="user", passwd="userpw", port=9990))

####### Input validation

import re
c['validation'] = {
    'branch' : re.compile(r'^[\w.+/~-]*$'),
    'revision' : re.compile(r'^[ \w\.\-\/]*$'),
    'property_name' : re.compile(r'^[\w\.\-\/\~:]*$'),
    'property_value' : re.compile(r'^[\w\.\-\/\~:]*$'),
}

####### Revision Links
# left default

####### Codebase generator
# We only have one repository; thus not needed
